/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { GridProps, TextFieldProps } from "@aws-amplify/ui-react";
import { EscapeHatchProps } from "@aws-amplify/ui-react/internal";
import { Events } from "../models";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type EventsUpdateFormInputValues = {
    eventTitle?: string;
    eventType?: string;
    eventCategory?: string;
    eventTags?: string;
    eventStartDate?: string;
    eventStartTime?: string;
    eventDesc?: string;
    eventAgenda?: string;
    eventSpeakers?: string;
    eventEndDate?: string;
    eventEndTime?: string;
    eventTimeZone?: string;
    eventVenueName?: string;
    eventCountry?: string;
    eventStreetAddress?: string;
    eventCity?: string;
    eventState?: string;
    eventZipCode?: number;
    eventTicketQuantity?: number;
    eventTicketCurrency?: string;
    eventTicketPrice?: number;
    eventTicketSaleStart?: string;
    eventTicketSaleEnd?: string;
    promoLinkedin?: string;
    promoTwitter?: string;
    promoFacebook?: string;
    promoInstagram?: string;
    promoDiscord?: string;
    promoDiscountType?: string;
    promoDiscountAmount?: number;
    promoDiscountCode?: string;
    promoDiscountExpiration?: string;
    orgName?: string;
    orgEmail?: string;
    orgCountryCode?: string;
    orgPhone?: string;
    orgWebsite?: string;
    eventCodeofConduct?: string;
    eventLogo?: string;
    eventImage?: string;
    eventVirtualURL?: string;
    eventCreatorUser?: string;
    eventCreatorName?: string;
    eventCreatorImage?: string;
    eventCreatorBio?: string;
    eventCreatorHeadline?: string;
};
export declare type EventsUpdateFormValidationValues = {
    eventTitle?: ValidationFunction<string>;
    eventType?: ValidationFunction<string>;
    eventCategory?: ValidationFunction<string>;
    eventTags?: ValidationFunction<string>;
    eventStartDate?: ValidationFunction<string>;
    eventStartTime?: ValidationFunction<string>;
    eventDesc?: ValidationFunction<string>;
    eventAgenda?: ValidationFunction<string>;
    eventSpeakers?: ValidationFunction<string>;
    eventEndDate?: ValidationFunction<string>;
    eventEndTime?: ValidationFunction<string>;
    eventTimeZone?: ValidationFunction<string>;
    eventVenueName?: ValidationFunction<string>;
    eventCountry?: ValidationFunction<string>;
    eventStreetAddress?: ValidationFunction<string>;
    eventCity?: ValidationFunction<string>;
    eventState?: ValidationFunction<string>;
    eventZipCode?: ValidationFunction<number>;
    eventTicketQuantity?: ValidationFunction<number>;
    eventTicketCurrency?: ValidationFunction<string>;
    eventTicketPrice?: ValidationFunction<number>;
    eventTicketSaleStart?: ValidationFunction<string>;
    eventTicketSaleEnd?: ValidationFunction<string>;
    promoLinkedin?: ValidationFunction<string>;
    promoTwitter?: ValidationFunction<string>;
    promoFacebook?: ValidationFunction<string>;
    promoInstagram?: ValidationFunction<string>;
    promoDiscord?: ValidationFunction<string>;
    promoDiscountType?: ValidationFunction<string>;
    promoDiscountAmount?: ValidationFunction<number>;
    promoDiscountCode?: ValidationFunction<string>;
    promoDiscountExpiration?: ValidationFunction<string>;
    orgName?: ValidationFunction<string>;
    orgEmail?: ValidationFunction<string>;
    orgCountryCode?: ValidationFunction<string>;
    orgPhone?: ValidationFunction<string>;
    orgWebsite?: ValidationFunction<string>;
    eventCodeofConduct?: ValidationFunction<string>;
    eventLogo?: ValidationFunction<string>;
    eventImage?: ValidationFunction<string>;
    eventVirtualURL?: ValidationFunction<string>;
    eventCreatorUser?: ValidationFunction<string>;
    eventCreatorName?: ValidationFunction<string>;
    eventCreatorImage?: ValidationFunction<string>;
    eventCreatorBio?: ValidationFunction<string>;
    eventCreatorHeadline?: ValidationFunction<string>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type EventsUpdateFormOverridesProps = {
    EventsUpdateFormGrid?: PrimitiveOverrideProps<GridProps>;
    eventTitle?: PrimitiveOverrideProps<TextFieldProps>;
    eventType?: PrimitiveOverrideProps<TextFieldProps>;
    eventCategory?: PrimitiveOverrideProps<TextFieldProps>;
    eventTags?: PrimitiveOverrideProps<TextFieldProps>;
    eventStartDate?: PrimitiveOverrideProps<TextFieldProps>;
    eventStartTime?: PrimitiveOverrideProps<TextFieldProps>;
    eventDesc?: PrimitiveOverrideProps<TextFieldProps>;
    eventAgenda?: PrimitiveOverrideProps<TextFieldProps>;
    eventSpeakers?: PrimitiveOverrideProps<TextFieldProps>;
    eventEndDate?: PrimitiveOverrideProps<TextFieldProps>;
    eventEndTime?: PrimitiveOverrideProps<TextFieldProps>;
    eventTimeZone?: PrimitiveOverrideProps<TextFieldProps>;
    eventVenueName?: PrimitiveOverrideProps<TextFieldProps>;
    eventCountry?: PrimitiveOverrideProps<TextFieldProps>;
    eventStreetAddress?: PrimitiveOverrideProps<TextFieldProps>;
    eventCity?: PrimitiveOverrideProps<TextFieldProps>;
    eventState?: PrimitiveOverrideProps<TextFieldProps>;
    eventZipCode?: PrimitiveOverrideProps<TextFieldProps>;
    eventTicketQuantity?: PrimitiveOverrideProps<TextFieldProps>;
    eventTicketCurrency?: PrimitiveOverrideProps<TextFieldProps>;
    eventTicketPrice?: PrimitiveOverrideProps<TextFieldProps>;
    eventTicketSaleStart?: PrimitiveOverrideProps<TextFieldProps>;
    eventTicketSaleEnd?: PrimitiveOverrideProps<TextFieldProps>;
    promoLinkedin?: PrimitiveOverrideProps<TextFieldProps>;
    promoTwitter?: PrimitiveOverrideProps<TextFieldProps>;
    promoFacebook?: PrimitiveOverrideProps<TextFieldProps>;
    promoInstagram?: PrimitiveOverrideProps<TextFieldProps>;
    promoDiscord?: PrimitiveOverrideProps<TextFieldProps>;
    promoDiscountType?: PrimitiveOverrideProps<TextFieldProps>;
    promoDiscountAmount?: PrimitiveOverrideProps<TextFieldProps>;
    promoDiscountCode?: PrimitiveOverrideProps<TextFieldProps>;
    promoDiscountExpiration?: PrimitiveOverrideProps<TextFieldProps>;
    orgName?: PrimitiveOverrideProps<TextFieldProps>;
    orgEmail?: PrimitiveOverrideProps<TextFieldProps>;
    orgCountryCode?: PrimitiveOverrideProps<TextFieldProps>;
    orgPhone?: PrimitiveOverrideProps<TextFieldProps>;
    orgWebsite?: PrimitiveOverrideProps<TextFieldProps>;
    eventCodeofConduct?: PrimitiveOverrideProps<TextFieldProps>;
    eventLogo?: PrimitiveOverrideProps<TextFieldProps>;
    eventImage?: PrimitiveOverrideProps<TextFieldProps>;
    eventVirtualURL?: PrimitiveOverrideProps<TextFieldProps>;
    eventCreatorUser?: PrimitiveOverrideProps<TextFieldProps>;
    eventCreatorName?: PrimitiveOverrideProps<TextFieldProps>;
    eventCreatorImage?: PrimitiveOverrideProps<TextFieldProps>;
    eventCreatorBio?: PrimitiveOverrideProps<TextFieldProps>;
    eventCreatorHeadline?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type EventsUpdateFormProps = React.PropsWithChildren<{
    overrides?: EventsUpdateFormOverridesProps | undefined | null;
} & {
    id?: string;
    events?: Events;
    onSubmit?: (fields: EventsUpdateFormInputValues) => EventsUpdateFormInputValues;
    onSuccess?: (fields: EventsUpdateFormInputValues) => void;
    onError?: (fields: EventsUpdateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: EventsUpdateFormInputValues) => EventsUpdateFormInputValues;
    onValidate?: EventsUpdateFormValidationValues;
} & React.CSSProperties>;
export default function EventsUpdateForm(props: EventsUpdateFormProps): React.ReactElement;
